name: Build and Deploy Container AWS ECS

on:
  workflow_call:
    inputs:
      github_sha:
        required: true
        type: string
      region:
        required: true
        type: string
      account:
        required: true
        type: string
      oidc_role:
        required: true
        type: string
      app_name:
        required: true
        type: string
      environment:
        required: true
        type: string
      service:
        required: true
        type: string
      config_path:
        required: true
        type: string
    secrets:
      BUILD_SERVER_SSH_KEY:
        required: true

jobs:
  build_publish_deploy:
    name: Build, Publish, and Deploy
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: webfactory/ssh-agent@v0.5.2 # Add ssh-agent
        with:
          ssh-private-key: |
            ${{ secrets.BUILD_SERVER_SSH_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.oidc_role }}
          aws-region: ${{ inputs.region }}

      - name: Install AWS Copilot CLI
        run: |
          sudo curl -Lo /usr/local/bin/copilot https://github.com/aws/copilot-cli/releases/download/v1.32.0/copilot-linux-v1.32.0 \
            && sudo chmod +x /usr/local/bin/copilot \
            && copilot --version

      # Build the Docker image
      - id: docker
        name: Build and push docker image
        env:
          GITHUB_SHA: ${{ inputs.github_sha }}
          REGION: ${{ inputs.region }}
          ACCOUNT: ${{ inputs.account }}
          APP_NAME: ${{ inputs.app_name }}
          SERVICE: ${{ inputs.service }}
          ENVIRONMENT: ${{ inputs.environment }}
          CONFIG_PATH: ${{ inputs.config_path }}
        run: |
          export AWS_REGION=$REGION

          # Get AWS credentials and create a session token file
          AWS_CREDENTIALS=$(aws sts get-session-token --duration-seconds 900)
          AWS_ACCESS_KEY_ID=$(echo $AWS_CREDENTIALS | jq -r '.Credentials.AccessKeyId')
          AWS_SECRET_ACCESS_KEY=$(echo $AWS_CREDENTIALS | jq -r '.Credentials.SecretAccessKey')
          AWS_SESSION_TOKEN=$(echo $AWS_CREDENTIALS | jq -r '.Credentials.SessionToken')
          
          # Create AWS credentials file for the docker build process
          echo "[default]
          aws_access_key_id = $AWS_ACCESS_KEY_ID
          aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
          aws_session_token = $AWS_SESSION_TOKEN
          region = $REGION" > aws_credentials

          DB_SECRET_FULL_ARN=$(aws secretsmanager list-secrets --filter Key="tag-key",Values="aws:cloudformation:stack-name" Key="tag-value",Values="OmcareCloudDB" | jq -r '.SecretList[0].ARN')
          DB_SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id $DB_SECRET_FULL_ARN | jq -r '.SecretString')
          PG_HOST=$(echo $DB_SECRET_VALUE | jq -r '.host')

          sed -e "s|#PGHOST|$PG_HOST|g" $CONFIG_PATH >> "$CONFIG_PATH.temp"
          cp "$CONFIG_PATH.temp" $CONFIG_PATH
          rm "$CONFIG_PATH.temp"

          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ACCOUNT.dkr.ecr.$REGION.amazonaws.com

          IMAGE_META="$( aws ecr batch-get-image --repository-name=$APP_NAME/$SERVICE --image-ids=imageTag=$GITHUB_SHA --query 'images[].imageId.imageTag' --output json )"
          if [ "$IMAGE_META" != "[]" ]; then
            printf "Image Tag $GITHUB_SHA found in repository $APP_NAME/$SERVICE.\nThis is a rollback\n\n"

            docker pull $ACCOUNT.dkr.ecr.$REGION.amazonaws.com/$APP_NAME/$SERVICE:$GITHUB_SHA
            docker tag $ACCOUNT.dkr.ecr.$REGION.amazonaws.com/$APP_NAME/$SERVICE:$GITHUB_SHA $ACCOUNT.dkr.ecr.$REGION.amazonaws.com/$APP_NAME/$SERVICE:live
            aws ecr batch-delete-image --repository-name $APP_NAME/$SERVICE --image-ids imageTag=live
            docker push $ACCOUNT.dkr.ecr.$REGION.amazonaws.com/$APP_NAME/$SERVICE:live
          else
            npm i
            DOCKER_BUILDKIT=1 docker build \
              --build-arg AWS_REGION=$REGION \
              --build-arg ENVIRONMENT=$ENVIRONMENT \
              --secret id=aws_credentials,src=aws_credentials \
              -t $SERVICE --ssh default .

            # Clean up AWS credentials file
            rm aws_credentials

            docker tag $SERVICE $ACCOUNT.dkr.ecr.$REGION.amazonaws.com/$APP_NAME/$SERVICE:live
            docker tag $SERVICE $ACCOUNT.dkr.ecr.$REGION.amazonaws.com/$APP_NAME/$SERVICE:$GITHUB_SHA

            docker push $ACCOUNT.dkr.ecr.$REGION.amazonaws.com/$APP_NAME/$SERVICE:$GITHUB_SHA
            aws ecr batch-delete-image --repository-name $APP_NAME/$SERVICE --image-ids imageTag=live
            docker push $ACCOUNT.dkr.ecr.$REGION.amazonaws.com/$APP_NAME/$SERVICE:live
          fi

          ENV_SHOW_RESOURCES=$(copilot env show --name $ENVIRONMENT --app $APP_NAME --json --resources)
          ENV_CLUSTER=$(echo $ENV_SHOW_RESOURCES | jq -r '.resources[] | select((.logicalID == "Cluster")) | .physicalID')

          SVC_SHOW_RESOURCES=$(copilot svc show --name $SERVICE --app $APP_NAME --json --resources)
          SERVICE_ARN=$(echo $SVC_SHOW_RESOURCES | jq -r '.resources | .["'${ENVIRONMENT}'"][] | select((.logicalID == "Service")) | .physicalID')
          SERVICE_ARN_ARR=(${SERVICE_ARN//// })
          SERVICE_NAME=${SERVICE_ARN_ARR[2]}

          aws ecs update-service \
              --service "$SERVICE_NAME" \
              --cluster "$ENV_CLUSTER" \
              --force-new-deployment

          aws ecs tag-resource --resource-arn $SERVICE_ARN --tags key=source/revision,value=$GITHUB_SHA

